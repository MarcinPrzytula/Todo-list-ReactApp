{"version":3,"sources":["my_toDo/components/AddTask.js","my_toDo/components/Task.js","my_toDo/components/DoneTask.js","my_toDo/components/TaskList.js","my_toDo/components/EditTask.js","my_toDo/App.js","index.js"],"names":["AddTask","handleNewTask","tasks","isImportant","setImportant","validateInput","useState","inputValue","setInputValue","dateInputValue","setDateInputValue","minDate","Date","toISOString","slice","maxDate","parseInt","className","value","onChange","e","currentTarget","type","placeholder","min","max","onClick","length","alert","Task","name","id","deleteTask","getId","setIsChecked","date","importantStyle","DoneTask","isChecked","finishDate","checkedStyle","TaskList","doneTasks","filter","task","sort","a","b","activeTasks","toLowerCase","activeTasksList","map","doneTasksList","style","fontSize","EditTask","editTask","isVisible","setIsVisible","onSubmit","preventDefault","App","setTasks","counter","setCounter","isEditBoxVisible","setIsEditBoxVisible","taskId","setTaskId","isImportantTask","setIsImportantTask","validateInputValue","val","items","valDate","replace","trim","find","item","getTime","toLocaleString","newTasks","currentTask","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.01442c52.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport '../style/AddTask.css';\r\n\r\nconst AddTask = ({\r\n  handleNewTask,\r\n  tasks,\r\n  isImportant,\r\n  setImportant,\r\n  validateInput,\r\n}) => {\r\n  const [inputValue, setInputValue] =\r\n    useState('');\r\n  const [dateInputValue, setDateInputValue] =\r\n    useState('');\r\n\r\n  const minDate = new Date()\r\n    .toISOString()\r\n    .slice(0, 10);\r\n  const maxDate = `${\r\n    parseInt(minDate.slice(0, 4)) + 1\r\n  }-12-31`;\r\n\r\n  const handleAddTask = () => {\r\n    const value = validateInput(\r\n      inputValue,\r\n      tasks,\r\n      dateInputValue\r\n    );\r\n    if (dateInputValue.length === 0)\r\n      return alert('Wybierz datę końca zadania');\r\n    if (value) {\r\n      handleNewTask(value, isImportant);\r\n\r\n      if (isImportant) setImportant(!isImportant);\r\n\r\n      setInputValue('');\r\n    }\r\n  };\r\n\r\n  const handleImportant = () => {\r\n    setImportant(!isImportant);\r\n  };\r\n\r\n  return (\r\n    <div className=\"add_container\">\r\n      <input\r\n        value={inputValue}\r\n        onChange={e => {\r\n          setInputValue(e.currentTarget.value);\r\n        }}\r\n        type=\"text\"\r\n        placeholder=\"Enter your task\"\r\n      />\r\n\r\n      <div className=\"dateContainer\">\r\n        <p>Do kiedy zrobić:</p>{' '}\r\n        <input\r\n          type=\"date\"\r\n          min={minDate}\r\n          max={maxDate}\r\n          value={dateInputValue}\r\n          onChange={e => {\r\n            setDateInputValue(\r\n              e.currentTarget.value\r\n            );\r\n          }}\r\n        />\r\n      </div>\r\n\r\n      <button\r\n        className={'buttonAdd'}\r\n        onClick={handleAddTask}\r\n      >\r\n        {' '}\r\n        <i className=\"far fa-plus-square\"></i>\r\n      </button>\r\n\r\n      <button\r\n        className={`${\r\n          isImportant ? 'important' : null\r\n        } buttonImportant`}\r\n        onClick={handleImportant}\r\n      >\r\n        <i className=\"fas fa-exclamation-circle\"></i>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddTask;\r\n","import React from 'react';\r\nimport '../style/Task.css';\r\nconst Task = ({\r\n  name,\r\n  id,\r\n  deleteTask,\r\n  getId,\r\n  isImportant,\r\n  setIsChecked,\r\n  date,\r\n}) => {\r\n  const importantStyle = isImportant\r\n    ? 'important'\r\n    : null;\r\n  return (\r\n    <>\r\n      <div className=\"task\">\r\n        <p className={importantStyle}>\r\n          {name} (zrobić do:{date})\r\n        </p>{' '}\r\n        <button\r\n          onClick={() => {\r\n            deleteTask(id);\r\n          }}\r\n        >\r\n          <i className=\"far fa-trash-alt\"></i>\r\n        </button>\r\n        <button\r\n          onClick={() => {\r\n            setIsChecked(id);\r\n          }}\r\n        >\r\n          <i className=\"far fa-check-square\"></i>\r\n        </button>\r\n        <button\r\n          onClick={() => {\r\n            getId(id);\r\n          }}\r\n        >\r\n          <i className=\"far fa-edit\"></i>\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Task;\r\n","import React from 'react';\r\nimport '../style/DoneTask.css';\r\n\r\nconst DoneTask = ({\r\n  name,\r\n  isImportant,\r\n  isChecked,\r\n  date,\r\n  finishDate,\r\n  deleteTask,\r\n  id,\r\n}) => {\r\n  const importantStyle = isImportant\r\n    ? 'important'\r\n    : null;\r\n\r\n  const checkedStyle = isChecked\r\n    ? 'checked'\r\n    : null;\r\n  return (\r\n    <>\r\n      <div className=\"task\">\r\n        <p\r\n          className={`${importantStyle} ${checkedStyle}`}\r\n        >\r\n          {name} (zrobić do:{date}) - wykonano:\r\n          {finishDate}\r\n        </p>{' '}\r\n        <button\r\n          onClick={() => {\r\n            deleteTask(id);\r\n          }}\r\n        >\r\n          <i className=\"far fa-trash-alt\"></i>\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DoneTask;\r\n","import React from 'react';\r\nimport Task from './Task';\r\nimport DoneTask from './DoneTask';\r\n\r\nconst TaskList = ({\r\n  tasks,\r\n  deleteTask,\r\n  getId,\r\n  setIsChecked,\r\n}) => {\r\n  const doneTasks = tasks.filter(\r\n    task => task.isChecked\r\n  );\r\n  if (doneTasks.length >= 2) {\r\n    doneTasks.sort((a, b) => {\r\n      if (a.finishDate < b.finishDate) {\r\n        return 1;\r\n      }\r\n      if (a.finishDate > b.finishDate) {\r\n        return -1;\r\n      }\r\n      return 0;\r\n    });\r\n  }\r\n\r\n  const activeTasks = tasks.filter(\r\n    task => !task.isChecked\r\n  );\r\n  if (activeTasks.length >= 2) {\r\n    activeTasks.sort((a, b) => {\r\n      a = a.name.toLowerCase();\r\n      b = b.name.toLowerCase();\r\n\r\n      if (a < b) return -1;\r\n      if (a > b) return 1;\r\n      return 0;\r\n    });\r\n  }\r\n\r\n  const activeTasksList = activeTasks.map(\r\n    ({\r\n      name,\r\n      id,\r\n      isImportant,\r\n      isChecked,\r\n      date,\r\n    }) => (\r\n      <Task\r\n        name={name}\r\n        id={id}\r\n        key={id}\r\n        deleteTask={deleteTask}\r\n        getId={getId}\r\n        isImportant={isImportant}\r\n        isChecked={isChecked}\r\n        setIsChecked={setIsChecked}\r\n        date={date}\r\n      />\r\n    )\r\n  );\r\n\r\n  const doneTasksList = doneTasks.map(\r\n    ({\r\n      name,\r\n      id,\r\n      isImportant,\r\n      isChecked,\r\n      date,\r\n      finishDate,\r\n    }) => (\r\n      <DoneTask\r\n        name={name}\r\n        id={id}\r\n        key={id}\r\n        isImportant={isImportant}\r\n        isChecked={isChecked}\r\n        date={date}\r\n        finishDate={finishDate}\r\n        deleteTask={deleteTask}\r\n      />\r\n    )\r\n  );\r\n  return (\r\n    <>\r\n      <p>\r\n        Number of tasks:{' '}\r\n        <span className=\"tasksCounter\">\r\n          {tasks.length}\r\n        </span>\r\n      </p>\r\n      <p>Aktywne zadania:</p>\r\n      {activeTasksList}\r\n      {tasks.length ? (\r\n        <p>\r\n          {doneTasksList.length\r\n            ? 'Taski zrobione'\r\n            : 'Nie zrobiłeś jeszcze żadnego zadania'}\r\n        </p>\r\n      ) : null}\r\n      {doneTasks.length > 5 && (\r\n        <span style={{ fontSize: 10 }}>\r\n          wyświetlonych jest jedynie 5 ostatnich\r\n          zadań\r\n        </span>\r\n      )}\r\n      {doneTasksList.slice(0, 5)}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TaskList;\r\n","import React, { useState } from 'react';\r\nimport '../style/EditTask.css';\r\n\r\nconst EditTask = ({\r\n  editTask,\r\n  tasks,\r\n  isVisible,\r\n  setIsVisible,\r\n  validateInput,\r\n}) => {\r\n  const [inputValue, setInputValue] =\r\n    useState('');\r\n\r\n  const handleChange = e => {\r\n    setInputValue(e.currentTarget.value);\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    const value = validateInput(\r\n      inputValue,\r\n      tasks\r\n    );\r\n\r\n    if (value) {\r\n      editTask(inputValue);\r\n\r\n      setInputValue('');\r\n    }\r\n  };\r\n\r\n  const handleClick = () => {\r\n    setIsVisible(false);\r\n  };\r\n  return (\r\n    <>\r\n      <div\r\n        className={`blurWrapper ${\r\n          isVisible ? 'show' : ''\r\n        }`}\r\n      >\r\n        <div className=\"formWrapper\">\r\n          <form\r\n            onSubmit={handleSubmit}\r\n            name=\"send\"\r\n          >\r\n            <input\r\n              onChange={handleChange}\r\n              value={inputValue}\r\n              type=\"text\"\r\n            />\r\n            <button className=\"saveButton\">\r\n              <i className=\"far fa-save\"></i>\r\n            </button>\r\n          </form>\r\n          <button\r\n            className=\"quit\"\r\n            onClick={handleClick}\r\n          >\r\n            <i className=\"far fa-times-circle\"></i>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EditTask;\r\n","import React, { useState } from 'react';\r\nimport AddTask from './components/AddTask';\r\nimport TaskList from './components/TaskList';\r\nimport EditTask from './components/EditTask';\r\nimport './style/App.css';\r\n\r\nconst App = () => {\r\n  const [tasks, setTasks] = useState([]);\r\n  const [counter, setCounter] = useState(0);\r\n  const [isEditBoxVisible, setIsEditBoxVisible] =\r\n    useState(false);\r\n  const [taskId, setTaskId] = useState('');\r\n  const [isImportantTask, setIsImportantTask] =\r\n    useState(false);\r\n  //   let currentId = '' - jebało sie w chuj jak bylo zamiast taskId;\r\n\r\n  const getId = id => {\r\n    setTaskId(id);\r\n    setIsEditBoxVisible(true);\r\n  };\r\n\r\n  const editTask = value => {\r\n    if (taskId === '')\r\n      return alert(\r\n        'najpierw wybierz zadanie do edycji!'\r\n      );\r\n    const currentTask = tasks.find(\r\n      task => task.id === taskId\r\n    );\r\n\r\n    // currentTask?.name = actuallyValue; nie działa :(\r\n\r\n    if (currentTask) {\r\n      currentTask.name = value;\r\n    }\r\n\r\n    setTasks([...tasks]);\r\n    setIsEditBoxVisible(false);\r\n  };\r\n\r\n  const deleteTask = id => {\r\n    setTasks(\r\n      tasks.filter(task => task.id !== id)\r\n    );\r\n  };\r\n  const handleTaskChecked = id => {\r\n    const finishDate = new Date(\r\n      new Date().getTime()\r\n    ).toLocaleString();\r\n\r\n    const newTasks = tasks.map(task => {\r\n      if (task.id === id) {\r\n        task.isChecked = !task.isChecked;\r\n        task.finishDate = finishDate;\r\n      }\r\n      return task;\r\n    });\r\n    setTasks(newTasks);\r\n  };\r\n\r\n  const handleNewTask = (\r\n    name,\r\n    isImportant,\r\n    date\r\n  ) => {\r\n    const task = {\r\n      name,\r\n      id: counter,\r\n      isImportant,\r\n      isChecked: false,\r\n      date,\r\n    };\r\n\r\n    setTasks([...tasks, task]);\r\n    setCounter(counter + 1);\r\n  };\r\n\r\n  const validateInputValue = (\r\n    val,\r\n    items,\r\n    valDate\r\n  ) => {\r\n    let value = val\r\n      .replace('>', '')\r\n      .replace('<', '')\r\n      .trim();\r\n\r\n    if (value.length < 3) {\r\n      alert(\r\n        'Zadanie musi składać się z minimum 3 znaków'\r\n      );\r\n      value = '';\r\n    } else {\r\n      const task = items.find(\r\n        item =>\r\n          item.name.toLowerCase().trim() ===\r\n          value.toLowerCase()\r\n      );\r\n      if (task) {\r\n        alert('To zadanie już jest');\r\n        value = '';\r\n      }\r\n    }\r\n\r\n    return value;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <AddTask\r\n        handleNewTask={handleNewTask}\r\n        tasks={tasks}\r\n        isImportant={isImportantTask}\r\n        setImportant={setIsImportantTask}\r\n        validateInput={validateInputValue}\r\n      />\r\n      <TaskList\r\n        deleteTask={deleteTask}\r\n        getId={getId}\r\n        tasks={tasks}\r\n        setIsChecked={handleTaskChecked}\r\n      />\r\n      <EditTask\r\n        isVisible={isEditBoxVisible}\r\n        setIsVisible={setIsEditBoxVisible}\r\n        editTask={editTask}\r\n        tasks={tasks}\r\n        validateInput={validateInputValue}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './my_toDo/App.js';\n// import App from './kurs_toDo/App.js';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}